// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 'model' represents any form of table-like instance that a database platform uses.
// We use tables with PostgreSQL but databases that use MongoDB will use collections. 
// Hence using generic syntaxing to fit either.
model User {
  // @id is the same thing as a PRIMARY KEY. It's how a record is distinguished within a table.
  // @default(uuid()) is a Prisma specific function.
  //     If this field is left blank when creating a record through Prisma it will automatically provide a UUID value.
  //     E.g., '2c6eb26c-06ba-460a-b4fa-3f4e896ebdff'.
  id                String                @id @unique @default(uuid())
  name              String                @unique
  password          String
  save_game         SaveGame?

  // More fields should be added when required, e.g., 'UserStats' or 'UserPerms'.
}

model SaveGame {
  id                String                @id @unique
  money             Int
  store             Store?
  inventory         Inventory?
  user              User                  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Store {
  id                String                @id @unique
  store_objects     StoreObject[]
  save_game         SaveGame              @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Inventory {
  id                String                @id @unique
  items             InventoryItem[]
  save_game         SaveGame              @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Item {
  id                Int                   @id @unique @default(autoincrement())
  name              String                @unique
  object            Object
  inventory_items   InventoryItem[]
  store_objects     StoreObject[]
}

model InventoryItem {
  item_id           Int                   @unique
  inventory_id      String                @unique
  quantity          Int
  item              Item                  @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventory         Inventory             @relation(fields: [inventory_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model StoreObject {
  item_id           Int                   @unique
  store_id          String                @unique
  quantity          Int
  item              Item                  @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store             Store                 @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Object {
  STOCK
  STRUCTURE
}