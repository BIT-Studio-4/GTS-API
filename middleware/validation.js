/**
 * @file Validation middleware that checks requests using Joi schemas
 * @author GTS
 */

import { authSchema, createUserSchema, updateUserSchema } from "./validationSchemas.js";

/**
 * @description Validate any /auth route that sends info, e.g., /register.
 * @param {*} req The request body including the headers and body sent by the client.
 * @param {*} res The response to be generated by the server after receiving the request.
 * @param {*} next The next step in the request chain, e.g, handling the request in the controllers.
 */
const validateAuth = (req, res, next) => {
  const { error } = authSchema.validate(req.body);

  if (error)
    return res.status(400).json({
      "msg": error.details[0].message,
    });
  
  next();
};

/**
 * @description Validate any route that creates a user, e.g., /api/users.
 * @param {*} req The request body including the headers and body sent by the client.
 * @param {*} res The response to be generated by the server after receiving the request.
 * @param {*} next The next step in the request chain, e.g, handling the request in the controllers.
 */
const validateCreateUser = (req, res, next) => {
  const { error } = createUserSchema.validate(req.body);

  if (error)
    return res.status(400).json({
      "msg": error.details[0].message,
    });

  next();
};

/**
 * @description Validate any route that updates a user, e.g., /api/users
 * @param {*} req The request body including the headers and body sent by the client.
 * @param {*} res The response to be generated by the server after receiving the request.
 * @param {*} next The next step in the request chain, e.g, handling the request in the controllers.
 */
const validateUpdateUser = (req, res, next) => {
  const { error } = updateUserSchema.validate(req.body);

  if (error)
    return res.status(400).json({
      "msg": error.details[0].message,
    });

  next();
};

export {
  validateAuth,
  validateCreateUser,
  validateUpdateUser,
};